<script>
// authVerification.js
const JSON_LIST = "/ghk.json"; // Path to your user JSON
const LOGIN_STORAGE_K = "authData";
const PIN_STORAGE_K = "authPinData";

// Clear existing interval if any (helps avoid duplicates on reload)
if (window.authVerificationInterval) {
  clearInterval(window.authVerificationInterval);
}

window.authVerificationInterval = setInterval(async () => {
  const storedAuth = (function () {
    const auth = localStorage.getItem(LOGIN_STORAGE_K);
    const pinData = localStorage.getItem(PIN_STORAGE_K);
    if (!auth || !pinData) return null;
    const authObj = JSON.parse(auth);
    const pinObj = JSON.parse(pinData);
    return { name: authObj.name, id: authObj.id, pin: pinObj.pin };
  })();

  if (!storedAuth) {
    clearInterval(window.authVerificationInterval);
    return;
  }

  try {
    const response = await fetch(JSON_LIST, { cache: "no-store" }); // Disable cache
    if (!response.ok) throw new Error();
    const authData = await response.json();

    const matchedUser = authData.users.find(
  (user) =>
    user.AuthName.toLowerCase() === storedAuth.name.toLowerCase() &&
    user.ID === storedAuth.id
);

    if (!matchedUser || storedAuth.pin !== authData.masterPIN) {
      localStorage.removeItem(LOGIN_STORAGE_K);
      localStorage.removeItem(PIN_STORAGE_K);
      clearInterval(window.authVerificationInterval);
      if (window.location.pathname !== "/entry/") {
        window.location.href = "/entry/";
      }
    }
  } catch {
    // silently ignore errors
  }
}, 2000);
</script>