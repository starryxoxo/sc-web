<script>
console.log("Starting periodic auth verification every 12 seconds");

const originalAuthVerificationInterval = authVerificationInterval;

setInterval(async () => {
  console.log("Periodic auth check triggered");
  const storedAuth = (function () {
    const auth = localStorage.getItem(LOGIN_STORAGE_KEY);
    const pinData = localStorage.getItem(PIN_STORAGE_KEY);
    if (!auth || !pinData) return null;
    const authObj = JSON.parse(auth);
    const pinObj = JSON.parse(pinData);
    console.log("Loaded from localStorage:", authObj, pinObj);
    return { name: authObj.name, id: authObj.id, pin: pinObj.pin };
  })();

  if (!storedAuth) {
    console.warn("No storedAuth found, clearing interval");
    clearInterval(originalAuthVerificationInterval);
    return;
  }

  try {
    const response = await fetch("/user.json", { cache: "no-store" }); // disable cache
    if (!response.ok) throw new Error("Failed to fetch user.json");
    const authData = await response.json();

    console.log("Fetched authData:", authData);

    const matchedUser = authData.users.find(
      (user) =>
        user.AuthName.toLowerCase() === storedAuth.name.toLowerCase() &&
        user.ID.toLowerCase() === (storedAuth.id || "").toLowerCase()
    );

    if (!matchedUser) {
      console.warn(
        `User not found: Name=${storedAuth.name}, ID=${storedAuth.id}`
      );
    }
    if (storedAuth.pin !== authData.masterPIN) {
      console.warn(
        `PIN mismatch: Stored PIN=${storedAuth.pin}, Master PIN=${authData.masterPIN}`
      );
    }
    if (!matchedUser || storedAuth.pin !== authData.masterPIN) {
      console.info("Invalid auth data, clearing storage and redirecting");
      localStorage.removeItem(LOGIN_STORAGE_KEY);
      localStorage.removeItem(PIN_STORAGE_KEY);
      clearInterval(originalAuthVerificationInterval);
      if (window.location.pathname !== "/entry/") {
        window.location.href = "/entry/";
      }
    }
  } catch (error) {
    console.error("Error during periodic auth verification:", error);
  }
}, 12000);
</script>
