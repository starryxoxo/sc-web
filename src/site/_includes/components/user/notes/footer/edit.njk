<script>
document.addEventListener("DOMContentLoaded", () => {
  // Throttle key for localStorage
  const THROTTLE_KEY = "editSaveThrottleUntil";

  window.handleContentSave = async function(updatedContent) {
    try {
      const response = await fetch("/.netlify/functions/create-pr", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ updatedContent }),
      });

      if (!response.ok) throw new Error("Failed to edit this page.");

      const data = await response.json();
      alert("Edit successfully made to pending changes. Please wait for two minutes to enable edits.");
    } catch (err) {
      alert("Encountered an error editing this page.");
    }
  };

  document.querySelectorAll(".editable-container").forEach(container => {
    const contentDiv = container.querySelector(".editable-content");
    const editBtn = container.querySelector(".edit-btn");
    const saveBtn = container.querySelector(".save-btn");
    const cancelBtn = container.querySelector(".cancel-btn");

    let originalContent = contentDiv.innerHTML;

    // Check throttle on load
    function checkThrottle() {
      const throttleUntil = localStorage.getItem(THROTTLE_KEY);
      const now = Date.now();

      if (throttleUntil && now < parseInt(throttleUntil, 10)) {
        saveBtn.disabled = true;
        saveBtn.classList.add("throttled");
        setTimeout(() => {
          saveBtn.disabled = false;
          saveBtn.classList.remove("throttled");
          localStorage.removeItem(THROTTLE_KEY);
        }, parseInt(throttleUntil, 10) - now);
      } else {
        saveBtn.disabled = false;
        saveBtn.classList.remove("throttled");
        localStorage.removeItem(THROTTLE_KEY);
      }
    }
    checkThrottle();

    editBtn.addEventListener("click", () => {
      contentDiv.contentEditable = "true";
      contentDiv.focus();

      editBtn.style.display = "none";
      saveBtn.style.display = "inline-block";
      cancelBtn.style.display = "inline-block";

      originalContent = contentDiv.innerHTML;
    });

    // Preserve line breaks and output pure text
    function getPlainTextWithLineBreaks(element) {
      if (!element.children.length) return element.innerText.trim();
      let text = '';
      for (let node of element.childNodes) {
        if (node.nodeType === Node.TEXT_NODE) {
          text += node.textContent;
        } else if (node.nodeType === Node.ELEMENT_NODE) {
          text += '\n\n' + node.innerText;
        }
      }
      return text.replace(/\n{3,}/g, '\n\n').trim();
    }

    // Save button click logic: throttle with popup
    saveBtn.addEventListener("click", (e) => {
      if (saveBtn.disabled) {
        // If throttled, show popup and prevent further action
        alert("Edits disabled");
        e.stopPropagation();
        return;
      }

      contentDiv.contentEditable = "false";
      editBtn.style.display = "inline-block";
      saveBtn.style.display = "none";
      cancelBtn.style.display = "none";

      const updatedContent = getPlainTextWithLineBreaks(contentDiv);

      if (window.handleContentSave) {
        window.handleContentSave(updatedContent);
      }

      // Set throttle in localStorage for 120 seconds
      const throttleUntil = Date.now() + 120000;
      localStorage.setItem(THROTTLE_KEY, throttleUntil.toString());
      saveBtn.disabled = true;
      saveBtn.classList.add("throttled");
      setTimeout(() => {
        saveBtn.disabled = false;
        saveBtn.classList.remove("throttled");
        localStorage.removeItem(THROTTLE_KEY);
      }, 120000);
    });

    cancelBtn.addEventListener("click", () => {
      contentDiv.innerHTML = originalContent;
      contentDiv.contentEditable = "false";

      editBtn.style.display = "inline-block";
      saveBtn.style.display = "none";
      cancelBtn.style.display = "none";
    });
  });
});
</script>